<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebAPI</name>
    </assembly>
    <members>
        <member name="T:WebAPI.Controllers.AccountController">
            <summary>
            Manage SignIn/SignUp and operations with users
            </summary>
        </member>
        <member name="M:WebAPI.Controllers.AccountController.#ctor(Microsoft.AspNetCore.Identity.UserManager{DataAccessLayer.Entities.AppUser},WebAPI.Utilities.JwtHandler,Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole{System.Guid}},BuisnessLogicLayer.Interfaces.IUserService)">
            <summary>
            Initialize new instance of FileController
            </summary>
            <param name="userManager">Provides the APIs for managing user in a persistence store</param>
            <param name="jwtHandler">JwtHandler instanse. Generate JWT. Retrive userId from JWT</param>
            <param name="roleManager">Managing user roles in a persistence store</param>
            <param name="userService">UserService instanse. Provides operations with users objects</param>
        </member>
        <member name="M:WebAPI.Controllers.AccountController.RegisterUser(WebAPI.Models.RegistrationRequestModel)">
            <summary>
            Performs user registration (sign up) in the application
            </summary>
            <param name="userForRegistration">Represent data for sign up request <see cref="T:WebAPI.Models.RegistrationRequestModel"/></param>
            <returns>Result of registration attempt <see cref="T:WebAPI.Models.RegistrationResponseModel"/></returns>
        </member>
        <member name="M:WebAPI.Controllers.AccountController.Login(WebAPI.Models.LoginRequestModel)">
            <summary>
            Performs user registration (sign in) in the application
            </summary>
            <param name="loginRequest">Represent data for sign in request <see cref="T:WebAPI.Models.LoginRequestModel"/></param>
            <returns>Result of login attempt <see cref="T:WebAPI.Models.LoginResponseModel"/></returns>
        </member>
        <member name="M:WebAPI.Controllers.AccountController.IsUserExist(System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:WebAPI.Controllers.AccountController.GetByEmail(System.String)">
            <summary>
            Return user model object by email
            </summary>
            <param name="email">Email address</param>
            <returns>Objects represents user data <see cref="T:BuisnessLogicLayer.Models.UserModel"/></returns>
        </member>
        <member name="M:WebAPI.Controllers.AccountController.GetById(System.Guid)">
            <summary>
            Returns an object describing user
            For execution needs "Administrator" permissions
            </summary>
            <param name="id">User id</param>
            <returns>Objects represents user data <see cref="T:BuisnessLogicLayer.Models.UserModel"/></returns>
        </member>
        <member name="M:WebAPI.Controllers.AccountController.Get(BuisnessLogicLayer.Models.QueryModel)">
            <summary>
            Returns a page of sorted and filtered objects describing users
            Page size, query for filtering, property for sorting and sorting order are defined by QueryModel object
            For execution needs "Administrator" permissions
            </summary>
            <param name="query">QueryModel object, incapsulate query options for pagination, sorting, filtering <see cref="T:BuisnessLogicLayer.Models.QueryModel"/></param>
            <returns>Returns filtered, sorted page of users data</returns>
        </member>
        <member name="M:WebAPI.Controllers.AccountController.Delete(System.Guid,BuisnessLogicLayer.Models.UserModel)">
            <summary>
            Deleting user. For execution needs "Administrator" permissions
            Can't delete user with "Administrator" rights
            </summary>
            <param name="id">User Id</param>
            <param name="userModel">Objects represents user data <see cref="T:BuisnessLogicLayer.Models.UserModel"/></param>
            <returns>Status 200 Ok, if file delete successfuly, error code otherwise</returns>
        </member>
        <member name="M:WebAPI.Controllers.AccountController.Update(System.Guid,BuisnessLogicLayer.Models.UserModel)">
            <summary>
            Update user object
            </summary>
            <param name="id">User Id</param>
            <param name="model">Objects represents user data <see cref="T:BuisnessLogicLayer.Models.UserModel"/></param>
            <returns>Status 200 Ok, if file update successfuly, error code otherwise</returns>
        </member>
        <member name="T:WebAPI.Controllers.FileController">
            <summary>
            Define endpoints to perform operations with files
            and files metadata
            </summary>
        </member>
        <member name="M:WebAPI.Controllers.FileController.#ctor(BuisnessLogicLayer.Interfaces.IFileService,WebAPI.Utilities.JwtHandler)">
            <summary>
            Initialize new instance of FileController
            </summary>
            <param name="fileService"> FileService instanse. Provides operations with file objects.</param>
            <param name="jwtHandler"> JwtHandler instanse. Generate JWT. Retrive userId from JWT</param>
        </member>
        <member name="M:WebAPI.Controllers.FileController.GetOwn(BuisnessLogicLayer.Models.QueryModel)">
            <summary>
            Returns a page of sorted and filtered objects describing files uploaded by the user.
            Page size, query for filtering, property for sorting and sorting order are defined by QueryModel object
            </summary>
            <param name="query">QueryModel object, incapsulate query options for pagination, sorting, filtering</param>
            <returns>Returns filtered, sorted page of file metadata</returns>
        </member>
        <member name="M:WebAPI.Controllers.FileController.GetOwnById(System.Guid)">
            <summary>
            Returns an object describing the file owned by the user
            </summary>
            <param name="id">File Id</param>
            <returns>File metadata</returns>
        </member>
        <member name="M:WebAPI.Controllers.FileController.DeleteOwn(System.Guid,BuisnessLogicLayer.Models.FileDataModel)">
            <summary>
            Deletes a file owned by the user
            </summary>
            <param name="id">File id</param>
            <param name="fileDataModel">File metadata object</param>
            <returns>Status 200 Ok, if file delete successfuly, error code otherwise</returns>
        </member>
        <member name="M:WebAPI.Controllers.FileController.DownloadOwn(System.Guid)">
            <summary>
            Download a file owned by the user
            </summary>
            <param name="id">File id</param>
            <returns>FileContentResult</returns>
        </member>
        <member name="M:WebAPI.Controllers.FileController.UpdateOwn(System.Guid,BuisnessLogicLayer.Models.FileDataModel)">
            <summary>
            Updates metadata about a file owned by the user
            </summary>
            <param name="Id">File Id</param>
            <param name="model">File metadata object</param>
            <returns>Status 200 Ok, if file update successfuly, error code otherwise</returns>
        </member>
        <member name="M:WebAPI.Controllers.FileController.GetShared(BuisnessLogicLayer.Models.QueryModel)">
            <summary>
            Deprecated. 
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:WebAPI.Controllers.FileController.GetSharedById(System.Guid)">
            <summary>
            Returns an object describing the file to which the user is granted access 
            (the file does not belong to the user)
            </summary>
            <param name="id">File Id</param>
            <returns>File metadata</returns>
        </member>
        <member name="M:WebAPI.Controllers.FileController.RefuseSharedById(System.Guid,BuisnessLogicLayer.Models.FileDataModel)">
            <summary>
            The user is relinquishing the rights to view the file
            </summary>
            <param name="id">File Id</param>
            <param name="model">File metadata object</param>
            <returns>Status 200 if action successful, error code otherwise</returns>
        </member>
        <member name="M:WebAPI.Controllers.FileController.Get(BuisnessLogicLayer.Models.QueryModel)">
            <summary>
            Returns a page of sorted and filtered objects describing all files
            Page size, query for filtering, property for sorting and sorting order are defined by QueryModel object
            For execution needs "Administrator" permissions
            </summary>
            <param name="query">QueryModel object, incapsulate query options for pagination, sorting, filtering <see cref="T:BuisnessLogicLayer.Models.QueryModel"/></param>
            <returns>Returns filtered, sorted page of file metadata</returns>
        </member>
        <member name="M:WebAPI.Controllers.FileController.GetById(System.Guid)">
            <summary>
            Returns an object describing file
            For execution needs "Administrator" permissions
            </summary>
            <param name="id">File Id</param>
            <returns>File metadata</returns>
        </member>
        <member name="M:WebAPI.Controllers.FileController.Delete(System.Guid,BuisnessLogicLayer.Models.FileDataModel)">
            <summary>
            Delete file. For execution needs "Administrator" permissions
            </summary>
            <param name="id">File id</param>
            <param name="fileDataModel">File metadata object</param>
            <returns>Status 200 Ok, if file delete successfuly, error code otherwise</returns>
        </member>
        <member name="M:WebAPI.Controllers.FileController.Download(System.Guid)">
            <summary>
            Download file. For execution needs "Administrator" permissions
            </summary>
            <param name="id">File id</param>
            <returns>FileContentResult</returns>
        </member>
        <member name="M:WebAPI.Controllers.FileController.Update(System.Guid,BuisnessLogicLayer.Models.FileDataModel)">
            <summary>
            Updates metadata about file. For execution needs "Administrator" permissions
            </summary>
            <param name="id">File Id</param>
            <param name="model">File metadata object</param>
            <returns>Status 200 Ok, if file update successfuly, error code otherwise</returns>
        </member>
        <member name="T:WebAPI.Controllers.SeedController">
            <summary>
            Seeding database, using only in Development environment!
            </summary>
        </member>
        <member name="M:WebAPI.Controllers.SeedController.#ctor(DataAccessLayer.Data.AppDbContext,Microsoft.AspNetCore.Identity.RoleManager{Microsoft.AspNetCore.Identity.IdentityRole{System.Guid}},Microsoft.AspNetCore.Identity.UserManager{DataAccessLayer.Entities.AppUser},Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            nitialize new instance of SeedController
            </summary>
            <param name="context">Persistence store</param>
            <param name="roleManager">Managing user roles in a persistence store</param>
            <param name="userManager">Provides the APIs for managing user in a persistence store.</param>
            <param name="env">Provides information about web hosting</param>
        </member>
        <member name="M:WebAPI.Controllers.SeedController.CreateFiles">
            <summary>
            Seeding database fith test files
            </summary>
            <returns>Inserted files objects</returns>
            <exception cref="T:System.Security.SecurityException">Throws if invoke in nin-development environment</exception>
        </member>
        <member name="M:WebAPI.Controllers.SeedController.CreateDefaultUsers">
            <summary>
            Seeding database fith test users
            </summary>
            <returns>Inserted user objects</returns>
            <exception cref="T:System.Security.SecurityException">Throws if invoke in nin-development environment</exception>
        </member>
        <member name="T:WebAPI.Controllers.ShortLinkController">
            <summary>
            Define endpoints to perform operations with short links
            </summary>
        </member>
        <member name="M:WebAPI.Controllers.ShortLinkController.#ctor(BuisnessLogicLayer.Interfaces.IShortLinkService)">
            <summary>
            Initialize new instance of ShortLinkController
            </summary>
            <param name="shortLinkService">ShortLinkService instanse</param>
        </member>
        <member name="M:WebAPI.Controllers.ShortLinkController.DownloadFile(System.String)">
            <summary>
            Download a file via short link
            </summary>
            <param name="link">Short link</param>
            <returns>FileContentResult</returns>
        </member>
        <member name="M:WebAPI.Controllers.ShortLinkController.GetFileData(System.String)">
            <summary>
             Returns an object describing the file
            </summary>
            <param name="link">Short link</param>
            <returns>File metadata</returns>
        </member>
        <member name="M:WebAPI.Controllers.ShortLinkController.CreateShortlink(System.Guid,BuisnessLogicLayer.Models.FileDataModel)">
            <summary>
            Create short link for file by id
            </summary>
            <param name="id">File id</param>
            <param name="model">File metadata object</param>
            <returns>Short link object</returns>
        </member>
        <member name="M:WebAPI.Controllers.ShortLinkController.DeleteShortLink(System.String,BuisnessLogicLayer.Models.FileDataModel)">
            <summary>
            Delete short link
            </summary>
            <param name="link">Short link</param>
            <param name="model">File metadata object</param>
            <returns>Status 200 Ok, if link delete successfuly, error code otherwise</returns>
        </member>
        <member name="T:WebAPI.Controllers.UploadController">
            <summary>
            Implement file uploading with streaming
            </summary>
        </member>
        <member name="M:WebAPI.Controllers.UploadController.#ctor(Microsoft.Extensions.Configuration.IConfiguration,DataAccessLayer.Interfaces.IUnitOfWork,WebAPI.Utilities.JwtHandler,Microsoft.Extensions.Logging.ILogger{WebAPI.Controllers.UploadController})">
            <summary>
            Initialize new instance of FileController
            </summary>
            <param name="config">IConfiguration instanse, for access to application configuration</param>
            <param name="unitOfWork">UnitOfWork instanse, for access to repositories</param>
            <param name="jwtHandler">JwtHandler instanse. Generate JWT. Retrive userId from JWT</param>
            <param name="logger">ILogger object to performing error logging</param>
        </member>
        <member name="M:WebAPI.Controllers.UploadController.UploadDatabase">
            <summary>
            Upload file by stream without FormValue model binding disabled
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebAPI.Models.FormData">
            <summary>
            Using to bind Note to File object
            cause file read from stream model binding doesn't read the form
            </summary>
        </member>
        <member name="P:WebAPI.Models.FormData.Note">
            <summary>
            Comment to file
            </summary>
        </member>
        <member name="T:WebAPI.Models.LoginRequestModel">
            <summary>
            Represent data for sign in request
            </summary>
        </member>
        <member name="P:WebAPI.Models.LoginRequestModel.Email">
            <summary>
            Email address
            </summary>
        </member>
        <member name="P:WebAPI.Models.LoginRequestModel.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="T:WebAPI.Models.LoginResponseModel">
            <summary>
            Represent data for sign in response
            </summary>
        </member>
        <member name="P:WebAPI.Models.LoginResponseModel.Success">
            <summary>
            TRUE if login successful, FALSE otherwise
            </summary>
        </member>
        <member name="P:WebAPI.Models.LoginResponseModel.Message">
            <summary>
            Describe result of login request
            </summary>
        </member>
        <member name="P:WebAPI.Models.LoginResponseModel.IsAdmin">
            <summary>
            TRUE if user has role "Administrator"
            </summary>
        </member>
        <member name="P:WebAPI.Models.LoginResponseModel.Token">
            <summary>
            JWT Bearer
            </summary>
        </member>
        <member name="T:WebAPI.Models.RegistrationRequestModel">
            <summary>
            Represent data for sign up request
            </summary>
        </member>
        <member name="P:WebAPI.Models.RegistrationRequestModel.UserName">
            <summary>
            User name
            </summary>
        </member>
        <member name="P:WebAPI.Models.RegistrationRequestModel.Email">
            <summary>
            User email
            </summary>
        </member>
        <member name="P:WebAPI.Models.RegistrationRequestModel.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:WebAPI.Models.RegistrationRequestModel.ConfirmPassword">
            <summary>
            Repeat of user password
            </summary>
        </member>
        <member name="M:WebAPI.Models.RegistrationRequestModel.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Implementation of IValidatableObject
            </summary>
            <param name="validationContext"><see cref="T:System.ComponentModel.DataAnnotations.ValidationContext"/></param>
            <returns>Collection of validation errors</returns>
        </member>
        <member name="T:WebAPI.Models.RegistrationResponseModel">
            <summary>
            Represent data for sign up response
            </summary>
        </member>
        <member name="T:WebAPI.Utilities.FileHelpers">
            <summary>
            Validate file
            </summary>
        </member>
        <member name="M:WebAPI.Utilities.FileHelpers.ProcessFormFile``1(Microsoft.AspNetCore.Http.IFormFile,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.String[],System.Int64)">
            <summary>
            Not used in this implimentation((
            </summary>
            <typeparam name="T"></typeparam>
            <param name="formFile"></param>
            <param name="modelState"></param>
            <param name="permittedExtensions"></param>
            <param name="sizeLimit"></param>
            <returns></returns>
        </member>
        <member name="M:WebAPI.Utilities.FileHelpers.ProcessStreamedFile(Microsoft.AspNetCore.WebUtilities.MultipartSection,Microsoft.Net.Http.Headers.ContentDispositionHeaderValue,Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.String[],System.Int64)">
            <summary>
            Validate streamed file
            </summary>
            <param name="section">A multipart section <see cref="T:Microsoft.AspNetCore.WebUtilities.MultipartSection"/></param>
            <param name="contentDisposition">Value of content-diposition header <see cref="T:Microsoft.Net.Http.Headers.ContentDispositionHeaderValue"/></param>
            <param name="modelState">Model state for validation errors <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary"/></param>
            <param name="permittedExtensions">Array of files extensions permitted by application</param>
            <param name="sizeLimit">file size limit</param>
            <returns>Files content by bytes array</returns>
        </member>
        <member name="T:WebAPI.Utilities.JwtHandler">
            <summary>
            Generate JWT
            </summary>
        </member>
        <member name="M:WebAPI.Utilities.JwtHandler.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Identity.UserManager{DataAccessLayer.Entities.AppUser},Microsoft.Extensions.Logging.ILogger{WebAPI.Utilities.JwtHandler})">
            <summary>
            Initialize new instance of JwtHandler
            </summary>
            <param name="configuration">IConfiguration instanse, for access to application configuration</param>
            <param name="userManager">Provides the APIs for managing user in a persistence store</param>
            <param name="logger">ILogger object to performing error logging</param>
        </member>
        <member name="M:WebAPI.Utilities.JwtHandler.GetTokenAsync(DataAccessLayer.Entities.AppUser)">
            <summary>
            Generate JWT security token
            </summary>
            <param name="user">AppUser instanse <see cref="T:DataAccessLayer.Entities.AppUser"/></param>
            <returns><see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/></returns>
        </member>
        <member name="M:WebAPI.Utilities.JwtHandler.GetUserId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Return user Id from JWT
            </summary>
            <param name="user"><see cref="T:System.Security.Claims.ClaimsPrincipal"/></param>
            <returns>Guid user id</returns>
            <exception cref="T:System.UnauthorizedAccessException">Throws if token doesn't contains user id</exception>
        </member>
        <member name="T:WebAPI.Utilities.MultipartRequestHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:WebAPI.Utilities.MultipartRequestHelper.GetBoundary(Microsoft.Net.Http.Headers.MediaTypeHeaderValue,System.Int32)">
            <summary>
            
            </summary>
            <param name="contentType"></param>
            <param name="lengthlimit"></param>
            <returns></returns>
            <exception cref="T:System.IO.InvalidDataException"></exception>
        </member>
        <member name="M:WebAPI.Utilities.MultipartRequestHelper.IsMultipartContentType(System.String)">
            <summary>
            
            </summary>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:WebAPI.Utilities.MultipartRequestHelper.HasFormDataContentDisposition(Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)">
            <summary>
            
            </summary>
            <param name="contentDisposition"></param>
            <returns></returns>
        </member>
        <member name="M:WebAPI.Utilities.MultipartRequestHelper.HasFileContentDisposition(Microsoft.Net.Http.Headers.ContentDispositionHeaderValue)">
            <summary>
            
            </summary>
            <param name="contentDisposition"></param>
            <returns></returns>
        </member>
        <member name="M:WebAPI.Utilities.MultipartRequestHelper.GetEncoding(Microsoft.AspNetCore.WebUtilities.MultipartSection)">
            <summary>
            
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
    </members>
</doc>
